#!/bin/sh
### BEGIN INIT INFO
# Provides:          rmm          
# Required-Start:    $all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: Run all of rmm service if it exist
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/local/bin


IPMID_DAEMON=/usr/local/bin/ipmi_module
IPMID_NAME=ipmi_module
MEMDB_DAEMON=/usr/local/bin/memdbd
MEMDB_NAME=memdbd
REST_DAEMON=/usr/local/bin/restd
REST_NAME=restd
ASSETD_DAEMON=/usr/local/bin/assetd
ASSETD_NAME=assetd
ASSETM_DAEMON=/usr/local/bin/asset_module
ASSETM_NAME=asset_module
RMMLOG_DAEMON=/usr/local/bin/rmmlogd
RMMLOG_NAME=rmmlogd
UPGRADE_DAEMON=/usr/local/bin/upgraded
UPGRADE_NAME=upgraded
REDFISH_DAEMON=/usr/local/bin/redfishd
REDFISH_NAME=redfishd
SSA_DAEMON=/usr/local/bin/snmp_subagentd
SSA_NAME=snmp_subagentd
REGISTERD_DAEMON=/usr/local/bin/registerd
REGISTERD_NAME=registerd
SNMPD_DAEMON=/usr/local/bin/snmpd
SNMPD_NAME=snmpd
SNMPD_DAEMON_OPTS='-f -Lo -c /etc/snmp/snmpd.conf -C --rwcommunity=public --master=agentx'

test -x $IPMID_DAEMON || exit 0
test -x $MEMDB_DAEMON || exit 0
test -x $REST_DAEMON || exit 0
test -x $ASSETM_DAEMON || exit 0
test -x $ASSETD_DAEMON || exit 0
test -x $UPGRADE_DAEMON || exit 0
test -x $RMMLOG_DAEMON || exit 0
test -x $REGISTERD_DAEMON || exit 0
test -x $SSA_DAEMON || exit 0
test -x $SNMPD_DAEMON || exit 0

start_daemon() {
    if [ -s /var/run/$2.pid ]; then
        RUNNING=$(cat /var/run/$2.pid)
        if [ -d /proc/$RUNNING ]; then
            if [ $(readlink /proc/$RUNNING/exe) = $1 ]; then
                echo "$2 already is running"
                return;
            fi
        fi
    fi
   
    echo -n "Starting daemon server: $2 \n"
    start-stop-daemon --start --quiet --make-pidfile --pidfile /var/run/$2.pid --background --exec $1
}

start_daemon_with_param() {
    if [ -s /var/run/$2.pid ]; then
        RUNNING=$(cat /var/run/$2.pid)
        if [ -d /proc/$RUNNING ]; then
            if [ $(readlink /proc/$RUNNING/exe) = $1 ]; then
                echo "$2 already is running"
                return;
            fi
        fi
    fi
   
    echo -n "Starting daemon server: $2 \n"
    start-stop-daemon --start --quiet --make-pidfile --pidfile /var/run/$2.pid --background --exec $1 -- $SNMPD_DAEMON_OPTS
}

stop_daemon() {
    if [ -s /var/run/$2.pid ]; then
        RUNNING=$(cat /var/run/$2.pid)
        if [ -d /proc/$RUNNING ]; then
            if [ $(readlink /proc/$RUNNING/exe) = $1 ]; then
                echo -n "Stopping daemon server: $2\n"
                start-stop-daemon --stop --oknodo --quiet --pidfile /var/run/$2.pid --exec $1 
                if [ -f /var/run/$2.pid ]
                then
                    rm /var/run/$2.pid
                fi
                return;
            fi
        fi
    fi
    echo "$2 is not running"
}

stop_daemon_no_output() {
    if [ -s /var/run/$2.pid ]; then
        RUNNING=$(cat /var/run/$2.pid)
        if [ -d /proc/$RUNNING ]; then
	    kill $RUNNING
            if [ -f /var/run/$2.pid ]
            then
                rm /var/run/$2.pid
            fi
            return;
        fi
    fi
}


get_status(){
    if [ -s /var/run/$2.pid ]; then
        RUNNING=$(cat /var/run/$2.pid)
        if [ -d /proc/$RUNNING ]; then
            if [ $(readlink /proc/$RUNNING/exe) = $1 ]; then
                echo "$2 is running"
                return;
            fi
        fi

        # No such PID, or executables don't match
        echo "$2 is not running."
    else
        if [ -f /var/run/$2.pid ]
        then 
            rm -f /var/run/$2.pid
        fi
            echo "$2 is not running."
    fi
}

do_start() {
    start_daemon_with_param $SNMPD_DAEMON $SNMPD_NAME $SNMPD_DAEMON_OPTS;
    start_daemon $RMMLOG_DAEMON $RMMLOG_NAME;
    start_daemon $IPMID_DAEMON $IPMID_NAME;
    start_daemon $MEMDB_DAEMON $MEMDB_NAME;
    start_daemon $REDFISH_DAEMON $REDFISH_NAME;
    start_daemon $SSA_DAEMON $SSA_NAME;
    start_daemon $REGISTERD_DAEMON $REGISTERD_NAME;
    start_daemon $ASSETD_DAEMON $ASSETD_NAME;
    start_daemon $ASSETM_DAEMON $ASSETM_NAME;
    start_daemon $REST_DAEMON $REST_NAME;

    stop_daemon_no_output $UPGRADE_DAEMON $UPGRADE_NAME;
    start_daemon $UPGRADE_DAEMON $UPGRADE_NAME;
}

do_stop() {
    stop_daemon $SNMPD_DAEMON $SNMPD_NAME
    stop_daemon $IPMID_DAEMON $IPMID_NAME;
    stop_daemon $MEMDB_DAEMON $MEMDB_NAME;
    stop_daemon $REST_DAEMON $REST_NAME;
    stop_daemon $REGISTERD_DAEMON $REGISTERD_NAME;
    stop_daemon $ASSETM_DAEMON $ASSETM_NAME;
    stop_daemon $ASSETD_DAEMON $ASSETD_NAME;
    stop_daemon $REDFISH_DAEMON $REDFISH_NAME;
    stop_daemon $SSA_DAEMON $SSA_NAME;
    stop_daemon $RMMLOG_DAEMON $RMMLOG_NAME;
}

do_status(){
    get_status $SNMPD_DAEMON $SNMPD_NAME
    get_status $IPMID_DAEMON $IPMID_NAME;
    get_status $MEMDB_DAEMON $MEMDB_NAME;
    get_status $REST_DAEMON $REST_NAME;
    get_status $REGISTERD_DAEMON $REGISTERD_NAME;
    get_status $ASSETM_DAEMON $ASSETM_NAME;
    get_status $ASSETD_DAEMON $ASSETD_NAME;
    get_status $RMMLOG_DAEMON $RMMLOG_NAME;
    get_status $REDFISH_DAEMON $REDFISH_NAME;
    get_status $SSA_DAEMON $SSA_NAME;
    get_status $UPGRADE_DAEMON $UPGRADE_NAME;
}

case "$1" in
    start)
    do_start
        ;;
    restart|reload|force-reload)
        echo "Error: argument '$1' not supported" >&2
        exit 3
        ;;
    stop)
        do_stop
        ;;
    status)
    do_status
        ;;

    *)
        echo "Usage: $0 start|stop|status" >&2
        exit 3
        ;;
esac
